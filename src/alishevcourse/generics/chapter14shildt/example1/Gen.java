package alishevcourse.generics.chapter14shildt.example1;

/* Обобщения (generics) - означает параметризованные типы. Позволяет создавать классы, методы и интерфейсы с параметрами (называются обобщёнными)
 * с помощью обобщений можно создать один класс, который будет работать с различными объектами, которые мы укажем в <>
 * мы по сути всегда использовали классы, интерфейсы и методы с параметрами, только не указывали прямо, они содержали параметр Object (мы могли оперировать различными объектами)
 * но нам необходима безопасность типов, что и вводят generics (еперь нет нужды в приведении типов (Cast) из типа Object, теперь все приведения выполняютяс автоматически)
 * также могут возникать ошибки, которые не видны компилятору, а на момент выполнения программы, например, когда в непараметризованном классе мы можем присвоить объекту типа Integer
 * объект типа String, эта операция верна,Э но не видна компилятору
*/

// Простой обобщённый класс
// Здесь Т обозначает параметр типа,
// который будет заменён реальным типом
// при создании объекта типа Gen

class Gen <T> {
    T ob; // объект типа Т

    // передать конструктору ссылку на объект типа Т
    Gen(T ob) {
        this.ob = ob;
    }

    //возвратить объкт ob
    T getOb() {
        return ob;
    }

    // показать тип Т
    void showType() {
        System.out.println("Типом Т является " + ob.getClass().getName());
    }
}


// емонстрация применения обобщённого класса
class GenDemo {
    public static void main(String[] args) {
        // при указании типа используются только ссылочные типы
        Gen<Integer> iOb = new Gen<>(88);

        iOb.showType();

        int v = iOb.getOb();
        System.out.println("Value " + v);
        System.out.println();

        Gen<String> iOb1 = new Gen<>("Text");

        iOb.showType();

        String v1 = iOb1.getOb();
        System.out.println("Value " + v1);
        System.out.println();
    }
}